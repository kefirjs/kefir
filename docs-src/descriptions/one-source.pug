h2#modify Modify an observable

p.
  Most methods in this section create a new observable of same type* from an original one.
  The new observable applies some transformation to each event from the original one
  and emits the result of the transformation.
  In most cases a transformation is applied only to #[b value] events,
  #[b end] and #[b error] events just passes through untouched.

p.
  #[b *] For example if the original observable was a stream,
  then the new one will also be a stream. Same for properties.




+descr-method('map', 'map', 'obs.map(fn)').
  Applies the given #[b fn] function to each value from the original observable
  and emits the value returned by #[b fn].

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3]);
    var result = source.map(x => x + 1);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.map] <value> 2
    > [sequentially.map] <value> 3
    > [sequentially.map] <value> 4
    > [sequentially.map] <end>
div

pre(title='events in time').
  source: ---1---2---3X
  result: ---2---3---4X
div




+descr-method('map-errors', 'mapErrors', 'obs.mapErrors(fn)').
  Same as #[a(href='#map') map] but for #[a(href='#about-errors') errors].

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3]).flatMap(Kefir.constantError);
    var result = source.mapErrors(x => x * 2);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.flatMap.mapErrors] <error> 2
    > [sequentially.flatMap.mapErrors] <error> 4
    > [sequentially.flatMap.mapErrors] <error> 6
    > [sequentially.flatMap.mapErrors] <end>

pre(title='events in time')
  :escapehtml
    source:  ---e---e---e---eX
                0   1   2   3
    result:  ---e---e---e---eX
                0   2   4   6
div




+descr-method('filter', 'filter', 'obs.filter([predicate])').
  Filters values from the original observable
  using the given #[b predicate] function.

p.
  If no #[b predicate] is provided, the function #[tt x =&gt; x] will be used.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3]);
    var result = source.filter(x => x > 1);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.filter] <value> 2
    > [sequentially.filter] <value> 3
    > [sequentially.filter] <end>

pre(title='events in time').
  source: ---1---2---3X
  result: -------2---3X
div

p.
  See also <a href="#filter-by">filterBy</a>.




+descr-method('filter-errors', 'filterErrors', 'obs.filterErrors([predicate])').
  Same as #[a(href='#filter') filter] but for #[a(href='#about-errors') errors].

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [0, 1, 2, 3]).flatMap(Kefir.constantError);
    var result = source.filterErrors(x => (x % 2) === 0);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.flatMap.filterErrors] <error> 0
    > [sequentially.flatMap.filterErrors] <error> 2
    > [sequentially.flatMap.filterErrors] <end>

pre(title='events in time')
  :escapehtml
    source:  ---e---e---e---eX
                0   1   2   3
    result:  ---e-------e----X
                0       2
div





+descr-method('take', 'take', 'obs.take(n)').
  Emits the first #[b n] values from the original observable, then ends.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3]);
    var result = source.take(2);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.take] <value> 1
    > [sequentially.take] <value> 2
    > [sequentially.take] <end>

pre(title='events in time').
  source: ---1---2---3X
  result: ---1---2X
div



+descr-method('take-errors', 'takeErrors', 'obs.takeErrors(n)').
  Emits the first #[b n] #[a(href='#about-errors') errors] from the
  original observable, then ends. Values just flow through.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3])
      .flatMap(x => Kefir.constantError(x));
    var result = source.takeErrors(2);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.flatMap.takeErrors] <error> 1
    > [sequentially.flatMap.takeErrors] <error> 2
    > [sequentially.flatMap.takeErrors] <end>

pre(title='events in time').
  source: ---e---e---eX
             1   2   3
  result: ---e---eX
             1   2
div



+descr-method('take-while', 'takeWhile', 'obs.takeWhile([predicate])').
  Emits values from the original observable until the given #[b predicate]
  function applied to a value returns false.
  Ends when the #[b predicate] returns false.

p.
  If no #[b predicate] is provided, the function #[tt x =&gt; x] will be used.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3]);
    var result = source.takeWhile(x => x < 3);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.takeWhile] <value> 1
    > [sequentially.takeWhile] <value> 2
    > [sequentially.takeWhile] <end>

pre(title='events in time').
  source: ---1---2---3X
  result: ---1---2---X
div

p.
  See also <a href="#take-while-by">takeWhileBy</a>.



+descr-method('last', 'last', 'obs.last()').
  Emits only the last value from the original observable.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3]);
    var result = source.last();
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.last] <value> 3
    > [sequentially.last] <end>

pre(title='events in time').
  source: ---1---2---3X
  result: -----------3X
div


+descr-method('skip', 'skip', 'obs.skip(n)').
  Skips the first #[b n] values from the original observable, then emits all the rest.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3]);
    var result = source.skip(2);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.skip] <value> 3
    > [sequentially.skip] <end>

pre(title='events in time').
  source: ---1---2---3X
  result: -----------3X
div



+descr-method('skip-while', 'skipWhile', 'obs.skipWhile([predicate])').
  Skips values from the original observable until the given #[b predicate]
  function applied to a value returns false,
  then stops applying the #[b predicate] to values and emits all of them.

p.
  If no #[b predicate] is provided, the function #[tt x =&gt; x] will be used.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 3, 2]);
    var result = source.skipWhile(x => x < 3);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.skipWhile] <value> 3
    > [sequentially.skipWhile] <value> 2
    > [sequentially.skipWhile] <end>

pre(title='events in time').
  source: ---1---3---2X
  result: -------3---2X
div



+descr-method('skip-duplicates', 'skipDuplicates', 'obs.skipDuplicates([comparator])').
  Skips duplicate values using #[tt ===] for comparison.
  Accepts an optional #[b comparator] function which is then used instead of #[tt ===].

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 2, 3, 1]);
    var result = source.skipDuplicates();
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.skipDuplicates] <value> 1
    > [sequentially.skipDuplicates] <value> 2
    > [sequentially.skipDuplicates] <value> 3
    > [sequentially.skipDuplicates] <value> 1
    > [sequentially.skipDuplicates] <end>

pre(title='events in time').
  source: ---1---2---2---3---1X
  result: ---1---2-------3---1X
div

p With custom #[b comparator] function:

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 2.1, 3, 1]);
    var result = source.skipDuplicates(
      (a, b) => Math.round(a) === Math.round(b)
    );
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.skipDuplicates] <value> 1
    > [sequentially.skipDuplicates] <value> 2
    > [sequentially.skipDuplicates] <value> 3
    > [sequentially.skipDuplicates] <value> 1
    > [sequentially.skipDuplicates] <end>

pre(title='events in time').
  source: ---1---2---â€¢---3---1X
                   2.1
  result: ---1---2-------3---1X
div



+descr-method('diff', 'diff', 'obs.diff([fn], [seed])').
  On each value from the original observable, calls the #[b fn]
  function with the previous and current values as arguments.
  At first time, calls #[b fn] with #[b seed] and current value.
  Emits whatever #[b fn] returns.

p.
  If no #[b seed] is provided, the first value will be used as a seed,
  and the result observable won't emit on first value.

p.
  If no #[b fn] function is provided, #[tt (a, b) =&gt; [a, b]] will be used.
  If you want to omit #[b fn] but provide #[b seed], pass #[tt null] as #[b fn].

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 2, 3]);
    var result = source.diff((prev, next) => next - prev, 0);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.diff] <value> 1
    > [sequentially.diff] <value> 1
    > [sequentially.diff] <value> 0
    > [sequentially.diff] <value> 1
    > [sequentially.diff] <end>

pre(title='events in time').
  source: ---1---2---2---3X
  result: ---1---1---0---1X
div



+descr-method('scan', 'scan', 'obs.scan(fn, [seed])').
  On each value from the original
  observable, calls the #[b fn] function with
  the previous result returned by #[b fn] and
  the current value emitted by the original observable.
  At first time, calls #[b fn] with #[b seed] as previous result.
  Emits whatever #[b fn] returns. Always creates a property.

p.
  If no #[b seed] is provided, the first value will be used as a seed.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 2, 3]);
    var result = source.scan((prev, next) => next + prev, 0);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.scan] <value:current> 0
    > [sequentially.scan] <value> 1
    > [sequentially.scan] <value> 3
    > [sequentially.scan] <value> 5
    > [sequentially.scan] <value> 8
    > [sequentially.scan] <end>

pre(title='events in time').
  source:  ---1---2---2---3X
  result: 0---1---3---5---8X
div




+descr-method('flatten', 'flatten', 'obs.flatten([transformer])').
  For this method it's expected that the source observable emits arrays.
  The result stream will then emit each element of these arrays.

p.
  Always returns a stream.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [[1], [], [2,3]]);
    var result = source.flatten();
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.flatten] <value> 1
    > [sequentially.flatten] <value> 2
    > [sequentially.flatten] <value> 3
    > [sequentially.flatten] <end>

pre(title='events in time').
  source:  --------â€¢--------â€¢-------- â€¢X
                 [1]       []     [2,3]
  result:  --------1-----------------23X
div

p.
  You can also provide the #[b transformer] function
  which will be applied to each value from #[b obs] observable,
  and which is supposed to return an array. This makes #[b flatten] a
  pretty powerful transformation method.
  It allows you to do three kinds
  of transformations on each value: change value (like map), skip value (like filter),
  and respond with several values to a single value.
  If you want to skip a value, return an empty array,
  to change the value â€” return an array with a single new value,
  to emit several values â€” return them in an array.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3, 4]);
    var result = source.flatten(x => {
      if (x % 2 === 0) {
        return [x * 10];
      } else {
        return [];
      }
    });
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.flatten] <value> 20
    > [sequentially.flatten] <value> 40
    > [sequentially.flatten] <end>

pre(title='events in time').
  source:  ---1---2---3---4X
  result:  -------â€¢-------â€¢X
                 20      40
div

p.
  See also <a href="#flat-map">flatMap</a>



+descr-method('delay', 'delay', 'obs.delay(wait)').
  Delays all events by #[b wait] milliseconds,
  with an exception for the current value of a property,
  or the end of an already ended observable. Doesn't delay #[a(href='#about-errors') errors].

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(200, [1, 2, 3]);
    var result = source.delay(100);
    result.log();


pre(title='console output')
  :escapehtml
    > [sequentially.delay] <value> 1
    > [sequentially.delay] <value> 2
    > [sequentially.delay] <value> 3
    > [sequentially.delay] <end>

pre(title='events in time').
  source:  -----1-----2-----3X
  result:  --------1-----2-----3X
div



+descr-method('throttle', 'throttle', 'obs.throttle(wait, [options])').
  Return a new throttled version of the original observable, which will emit values
  only at most once every #[b wait] milliseconds.
  If used on a property, the current value will always pass without any delay.

p.
  Accepts an optional #[b options] object similar to
  <a href="http://underscorejs.org/#throttle" target="_blank">underscore.throttle</a>.
  By default, it will emit an event as soon as it comes for the first time, and,
  if any new event comes during the wait period,
  it will emit the last of them as soon as that period is over.
  If you'd like to disable the leading-edge emit,
  pass #[tt {leading: false}]. And if you'd like to disable the emit
  on the trailing-edge, pass #[tt {trailing: false}].

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(750, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]);
    var result = source.throttle(2500);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.throttle] <value> 1
    > [sequentially.throttle] <value> 4
    > [sequentially.throttle] <value> 7
    > [sequentially.throttle] <value> 0
    > [sequentially.throttle] <end>
div

pre(title='events in time').
  source:  --1--2--3--4--5--6--7--8--9--0X
  result:  --1---------4---------7---------0X
div




+descr-method('debounce', 'debounce', 'obs.debounce(wait, [options])').
  Creates a new debounced version of the original observable.
  Will emit a value only after #[b wait] milliseconds period of no events.
  Pass #[tt {immediate: true}] as an #[b options] object to cause
  observable to emit a value on the leading instead of the
  trailing edge of the #[b wait] interval.
  If used on a property, the current value will always pass without any delay.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3, 0, 0, 0, 4, 5, 6]);
    source = source.filter(x => x > 0);
    var result = source.debounce(250);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.filter.debounce] <value> 3
    > [sequentially.filter.debounce] <value> 6
    > [sequentially.filter.debounce] <end>
div

pre(title='events in time').
  source:  ---1---2---3---------------4---5---6X
  result:  ----------------------3---------------------6X
div




+descr-method('ignore-values', 'ignoreValues', 'obs.ignoreValues()').
  Ignores all values from the original observable, emitting only errors and end.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [0, -1, 2, -3])
      .flatMap(x => x < 0 ? Kefir.constantError(x) : Kefir.constant(x));
    var result = source.ignoreValues()
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.flatMap.ignoreValues] <error> -1
    > [sequentially.flatMap.ignoreValues] <error> -3
    > [sequentially.flatMap.ignoreValues] <end>

pre(title='events in time')
  :escapehtml
    source:  ---â€¢---e---â€¢---eX
                0  -1   2  -3
    result:  -------e-------eX
                   -1      -3
div




+descr-method('ignore-errors', 'ignoreErrors', 'obs.ignoreErrors()').
  Ignores all errors from the original observable, emitting only values and end.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [0, -1, 2, -3])
      .flatMap(x => x < 0 ? Kefir.constantError(x) : Kefir.constant(x));
    var result = source.ignoreErrors()
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.flatMap.ignoreErrors] <value> 0
    > [sequentially.flatMap.ignoreErrors] <value> 2
    > [sequentially.flatMap.ignoreErrors] <end>

pre(title='events in time')
  :escapehtml
    source:  ---â€¢---e---â€¢---eX
                0  -1   2  -3
    result:  ---â€¢-------â€¢----X
                0       2
div



+descr-method('ignore-end', 'ignoreEnd', 'obs.ignoreEnd()').
  Ignores end of source observable.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3]);
    var result = source.ignoreEnd();
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.ignoreEnd] <value> 1
    > [sequentially.ignoreEnd] <value> 2
    > [sequentially.ignoreEnd] <value> 3

pre(title='events in time').
  source:  ---1---2---3X
  result:  ---1---2---3---
div




+descr-method('before-end', 'beforeEnd', 'obs.beforeEnd(fn)').
  Allows you to insert an additional value just before the observable ends.
  #[b fn] will be called on #[b obs]' end with no arguments,
  and whatever it return will be emitted in the result stream before end.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3]);
    var result = source.beforeEnd(() => 0);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.beforeEnd] <value> 1
    > [sequentially.beforeEnd] <value> 2
    > [sequentially.beforeEnd] <value> 3
    > [sequentially.beforeEnd] <value> 0
    > [sequentially.beforeEnd] <end>

pre(title='events in time').
  source:  ---1---2---3 X
  result:  ---1---3---30X
div



+descr-method('sliding-window', 'slidingWindow', 'obs.slidingWindow(max, [min])').
  Will emit arrays containing the last #[b n] values from the #[b obs] observable,
  where #[b n] is between #[b max] and #[b min] arguments.
  By default #[b min] equals #[tt 0].

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3, 4, 5]);
    var result = source.slidingWindow(3, 2)
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.slidingWindow] <value> [1, 2]
    > [sequentially.slidingWindow] <value> [1, 2, 3]
    > [sequentially.slidingWindow] <value> [2, 3, 4]
    > [sequentially.slidingWindow] <value> [3, 4, 5]
    > [sequentially.slidingWindow] <end>

pre(title='events in time').
  source:  --------1--------2--------3--------4--------5X
  result:  -----------------â€¢--------â€¢--------â€¢--------â€¢X
                        [1,2]  [1,2,3]  [2,3,4]  [3,4,5]
div




+descr-method('buffer-while', 'bufferWhile', 'obs.bufferWhile([predicate], [options])').
  Passes every value from the source observable to the #[b predicate] function.
  If it returns #[tt true], adds the value to the buffer, otherwise flushes the buffer.
  Also flushes the buffer before end, but you can disable that
  by passing #[tt {flushOnEnd: false}] as #[b options].

p.
  The default #[b predicate] is #[tt x =&gt; x].
  If you want to omit #[b predicate] but pass #[b options],
  pass #[tt null] as #[b predicate].

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3, 4, 5]);
    var result = source.bufferWhile(x => x !== 3);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.bufferWhile] <value> [1, 2, 3]
    > [sequentially.bufferWhile] <value> [4, 5]
    > [sequentially.bufferWhile] <end>

pre(title='events in time').
  source:  ---1---2---3---4---5 X
  result:  -----------â€¢--------â€¢X
                [1,2,3]    [4,5]
div



+descr-method('buffer-with-count', 'bufferWithCount', 'obs.bufferWithCount(count, [options])').
  Buffers all values from #[b obs] observable, and flushes the buffer
  every time #[b count] values have been passed through.
  Also flushes the buffer before end, but you can disable that
  by passing #[tt {flushOnEnd: false}] as #[b options].

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3, 4, 5]);
    var result = source.bufferWithCount(2);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.bufferWithCount] <value> [1, 2]
    > [sequentially.bufferWithCount] <value> [3, 4]
    > [sequentially.bufferWithCount] <value> [5]
    > [sequentially.bufferWithCount] <end>

pre(title='events in time').
  source:  --------1--------2--------3--------4--------5 X
  result:  -----------------â€¢-----------------â€¢---------â€¢X
                        [1,2]             [3,4]       [5]X
div




+descr-method('buffer-with-time-or-count', 'bufferWithTimeOrCount', 'obs.bufferWithTimeOrCount(interval, count, [options])').
  Continuously buffers values from the source observable, flushing
  every #[b interval] milliseconds, or immediately once #[b count]
  values have been stored.
  Also flushes the buffer before end, but you can disable that
  by passing #[tt {flushOnEnd: false}] as #[b options].

p.
  Limited by time:

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3, 4, 5, 6, 7, 8]);
    var result = source.bufferWithTimeOrCount(330, 10);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.bufferWithTimeOrCount] <value> [1, 2, 3]
    > [sequentially.bufferWithTimeOrCount] <value> [4, 5, 6]
    > [sequentially.bufferWithTimeOrCount] <value> [7, 8]
    > [sequentially.bufferWithTimeOrCount] <end>

pre(title='events in time').
  source:  ---1---2---3---4---5---6---7---8 X
  result:  ------------â€¢------------â€¢------â€¢X
                [1,2,3]       [4,5,6]  [7,8]

p.
  Limited by count:

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3, 4, 5, 6, 7, 8]);
    var result = source.bufferWithTimeOrCount(330, 2);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.bufferWithTimeOrCount] <value> [1, 2]
    > [sequentially.bufferWithTimeOrCount] <value> [3, 4]
    > [sequentially.bufferWithTimeOrCount] <value> [5, 6]
    > [sequentially.bufferWithTimeOrCount] <value> [7, 8]
    > [sequentially.bufferWithTimeOrCount] <end>

pre(title='events in time').
  source:  ---1---2---3---4---5---6---7---8X
  result:  -------â€¢-------â€¢-------â€¢-------â€¢X
              [1,2]   [3,4]   [5,6]   [7,8]
div




+descr-method('transduce', 'transduce', 'obs.transduce(transducer)').
  This method allows you to use transducers in Kefir.
  It supports any transducers implementation that follows
  <a href="https://github.com/cognitect-labs/transducers-js#the-transducer-protocol">the transducer protocol</a>, for example
  <a href="https://github.com/cognitect-labs/transducers-js">cognitect-labs/transducers-js</a> or
  <a href="https://github.com/jlongster/transducers.js">jlongster/transducers.js</a>.
  To learn more about transducers please visit these library pages.

p.
  In the example the
  <a href="https://github.com/cognitect-labs/transducers-js">cognitect-labs/transducers-js</a>
  library is used.

pre.javascript(title='example')
  :escapehtml
    var t = transducers;
    var source = Kefir.sequentially(100, [1, 2, 3, 4, 5, 6]);
    var myTransducer = t.comp(
      t.map(x => x + 10),
      t.filter(x => x % 2 === 0),
      t.take(2)
    );
    var result = source.transduce(myTransducer);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.transduce] <value> 12
    > [sequentially.transduce] <value> 14
    > [sequentially.transduce] <end>

pre(title='events in time').
  source:  ---1---2---3---4---5---6X
  result:  -------â€¢-------â€¢X
                 12      14
div

+descr-method('thru', 'thru', 'obs.thru(transformer)').
  Calls #[b transformer] with #[b obs] as argument and returns whatever
  #[b transformer] returned. Put another way, #[tt o.thru(fn)] is the
  same as #[tt fn(o)]. This allows you to integrate your helper functions
  into chains of Kefir method calls without adding them to Observable prototype.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3, 4, 5, 6]);
    var transformer = obs => obs.filter(x => x > 2);
    var result = source.thru(transformer).map(x => x - 1); // is the same as transformer(source).map(...)
    result.log();
div

pre(title='events in time').
  source:  ---1---2---3---4---5---6X
  result:  -----------2---3---4---5X
div

pre(title='console output')
  :escapehtml
    > [sequentially.filter.map] <value> 2
    > [sequentially.filter.map] <value> 3
    > [sequentially.filter.map] <value> 4
    > [sequentially.filter.map] <value> 5
    > [sequentially.filter.map] <end>
div

+descr-method('with-handler', 'withHandler', 'obs.withHandler(handler)').
  The most general transformation method. All other transformation methods above
  can be implemented via #[b withHandler].
  Will call the #[b handler] function on each event from #[b obs] observable,
  passing to it two arguments: an <a href="#emitter-object">emitter</a>,
  and an event object (with same format as in <a href="#on-any">onAny</a> callback).

p.
  By default, it will not emit any values or errors, and it will not end when #[b obs]
  observable ends. Instead you should implement the desired behaviour in
  the #[b handler] function, i.e. analyse #[b event object] and call
  #[b emitter] methods if necessary. You can call
  the #[b emitter] methods several times in each #[b handler] execution,
  and you can also call them any time later, for example to implement
  <a href="#delay">delay</a>.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [0, 1, 2, 3]);
    var result = source.withHandler((emitter, event) => {
      if (event.type === 'end') {
        emitter.emit('bye');
        emitter.end();
      }
      if (event.type === 'value') {
        for (var i = 0; i < event.value; i++) {
          emitter.emit(event.value);
        }
      }
    });
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.withHandler] <value> 1
    > [sequentially.withHandler] <value> 2
    > [sequentially.withHandler] <value> 2
    > [sequentially.withHandler] <value> 3
    > [sequentially.withHandler] <value> 3
    > [sequentially.withHandler] <value> 3
    > [sequentially.withHandler] <value> bye
    > [sequentially.withHandler] <end>
div

pre(title='events in time').
  source:  ---0---1--- 2---  3 X
  result:  -------â€¢---â€¢â€¢---â€¢â€¢â€¢â€¢X
                  1   22   333bye
div
