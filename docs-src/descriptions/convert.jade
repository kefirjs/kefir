h2#convert Convert observables


+descr-method('to-property', 'toProperty', 'stream.toProperty([current])').
  Converts a stream to a property.
  Accepts optional <b>current</b> argument, which becomes current value of the
  property.

pre(title='example').
  var source = Kefir.sequentially(100, [1, 2, 3]);
  var result = source.toProperty(0);
  result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.toProperty] <value:current> 0
    > [sequentially.toProperty] <value> 1
    > [sequentially.toProperty] <value> 2
    > [sequentially.toProperty] <value> 3
    > [sequentially.toProperty] <end>

pre(title='events in time').
  source:  ----1----2----3X
  result: 0----1----2----3X
div



+descr-method('changes', 'changes', 'property.changes()').
  Converts a property to a stream.
  If property has current value, it will be ignored
  (stream's subscribers won't get it).

pre(title='example').
  var source = Kefir.sequentially(100, [1, 2, 3]);
  var property = source.toProperty(0);
  var result = property.changes();
  result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.toProperty.changes] <value> 1
    > [sequentially.toProperty.changes] <value> 2
    > [sequentially.toProperty.changes] <value> 3
    > [sequentially.toProperty.changes] <end>

pre(title='events in time').
  property: 0----1----2----3X
  result:    ----1----2----3X
div



+descr-method('with-default', 'withDefault', 'obs.withDefault(current)').
  Same as #[a(href="#to-property") toProperty],
  except the #[b current] argument is required
  and one can call this method on a property.
  When called on a property which already has a current value,
  just returns same property with same current value.
  But if source property has no current value,
  specified value will be current of result property.


p.
  Example with property without current value:

pre(title='example').
  var source = Kefir.sequentially(100, [1, 2]).toProperty();
  var result = source.withDefault(0);
  result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.toProperty.withDefault] <value:current> 0
    > [sequentially.toProperty.withDefault] <value> 1
    > [sequentially.toProperty.withDefault] <value> 2
    > [sequentially.toProperty.withDefault] <end>

pre(title='events in time').
  source:  ----1----2----3X
  result: 0----1----2----3X
div


p.
  Example with property with current value:

pre(title='example').
  var source = Kefir.sequentially(100, [1, 2]).toProperty(5);
  var result = source.withDefault(0);
  result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.toProperty.withDefault] <value:current> 5
    > [sequentially.toProperty.withDefault] <value> 1
    > [sequentially.toProperty.withDefault] <value> 2
    > [sequentially.toProperty.withDefault] <end>

pre(title='events in time').
  source: 5----1----2----3X
  result: 5----1----2----3X
div
