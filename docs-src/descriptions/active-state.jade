h2#active-state Activation and deactivation of observables

p.
  At the moment one create an observable it's not yet subscribed to its source.
  Observables subscribe to their sources only when they themselves get a first subscriber.
  In this docs this process is called #[b activation] of an observable.
  Also when the last subscriber is removed from an observable,
  the observable #[b deactivates] and unsubscribes from its source.
  Later it can be #[b activated] again, and so on.

p.
  The #[i source] to which observable subscribe on #[b activation] may
  be an another observable (for example in #[tt .map]),
  several other observables (#[tt .combine]),
  or some external source (#[tt .fromEvents]).

p.
  For example #[tt stream = Kefir.fromEvents(el, 'click')] won't
  immediately subscribe to the #[tt 'click'] event on #[tt el],
  it will subscribe only when the first listener will be added to the
  #[tt stream]. And it will automatically unsubscribe when the last listener
  will be removed from the #[tt stream].

pre.javascript
  :escapehtml
    var stream = Kefir.fromEvents(el, 'click');
    // at this moment event listener to _el_ not added

    stream.onValue(someFn);
    // now 'click' listener is added to _el_

    stream.offValue(someFn);
    // and now it is removed again

p.
  As you might already guess #[b activation] and #[b deactivation] propagates up the observables chain.
  For instance if one create a long chain like #[tt Kefir.fromEvents(...).map(...).filter(...).take(...)],
  the whole chain will be #[b inactive] until first subscriber is added,
  and then it will #[b activate] up to #[tt .fromEvents]. Same for #[b deactivation].
