h2#create-stream Create a stream





+descr-method('never', 'never', 'Kefir.never()').
  Creates a stream that already ended and will never produce any events.

pre.javascript(title='example').
  var stream = Kefir.never();
  stream.log();

pre(title='console output')
  :escapehtml
    > [never] <end:current>

pre(title='events in time').
  stream:  X
div




+descr-method('later', 'later', 'Kefir.later(wait, value)').
  Creates a stream that produces a single #[b value]
  after #[b wait] milliseconds, then ends.

pre.javascript(title='example').
  var stream = Kefir.later(1000, 1);
  stream.log();

pre(title='console output (after 1 second)')
  :escapehtml
    > [later] <value> 1
    > [later] <end>

pre(title='events in time').
  stream:  ----1X
div




+descr-method('interval', 'interval', 'Kefir.interval(interval, value)').
  Creates a stream that produces the same #[b value]
  each #[b interval] milliseconds. Never ends.

pre.javascript(title='example').
  var stream = Kefir.interval(1000, 1);
  stream.log();

pre(title='console output')
  :escapehtml
    > [interval] <value> 1
    > [interval] <value> 1
    > [interval] <value> 1
    ...

pre(title='events in time').
  stream:  ----1----1----1----1---
div


+descr-method('sequentially', 'sequentially', 'Kefir.sequentially(interval, values)').
  Creates a stream containing the given #[b values] (array),
  delivered with the given #[b interval] in milliseconds.
  Ends after all #[b values] are delivered.

pre.javascript(title='example').
  var stream = Kefir.sequentially(1000, [1, 2, 3]);
  stream.log();

pre(title='console output')
  :escapehtml
    > [sequentially] <value> 1
    > [sequentially] <value> 2
    > [sequentially] <value> 3
    > [sequentially] <end>

pre(title='events in time').
  stream:  ----1----2----3X
div



+descr-method('from-poll', 'fromPoll', 'Kefir.fromPoll(interval, fn)').
  Creates a stream that polls the given #[b fn] function,
  with the given #[b interval] in milliseconds,
  and emits the values returned by #[b fn].
  Never ends.

pre.javascript(title='example')
  :escapehtml
    var start = new Date();
    var stream = Kefir.fromPoll(1000, () => new Date() - start);
    stream.log();

pre(title='console output')
  :escapehtml
    > [fromPoll] <value> 1001
    > [fromPoll] <value> 2002
    > [fromPoll] <value> 3004
    > [fromPoll] <value> 4006
    > [fromPoll] <value> 5007
    > [fromPoll] <value> 6007
    ...

pre(title='events in time').
  stream:  ----•----•----•----•---
            1001 2002 3004 4006
div


+descr-method('with-interval', 'withInterval', 'Kefir.withInterval(interval, handler)').
  General method to create an interval based stream.
  Creates a stream that calls the given #[b handler] function,
  with the given #[b interval] in milliseconds.
  The #[b handler] function is called with one argument —
  an #[a(href="#emitter-object") emitter].

pre.javascript(title='example')
  :escapehtml
    var start = new Date();
    var stream = Kefir.withInterval(1000, emitter => {
      var time = new Date() - start;
      if (time < 4000) {
        emitter.emit(time);   // emit a value
      } else {
        emitter.end();        // end the stream
      }
    });
    stream.log();

pre(title='console output')
  :escapehtml
    > [withInterval] <value> 1002
    > [withInterval] <value> 2003
    > [withInterval] <value> 3005
    > [withInterval] <end>

pre(title='events in time').
  stream:  ----•----•----•----X
            1002 2003 3005
div

p.
  You may call #[b emitter] methods several times on each interval tick,
  or not call them at all.



+descr-method('from-callback', 'fromCallback', 'Kefir.fromCallback(fn)').
  Convert a function that accepts a #[b callback]
  as the first argument to a stream.
  Emits at most one value when #[b callback] is called, then ends.
  The #[b fn] function will be called at most once,
  when the first subscriber will be added to the stream.

pre.javascript(title='example')
  :escapehtml
    var stream = Kefir.fromCallback(callback => {
      // we use setTimeout here just to simulate some asynchronous activity
      setTimeout(() => callback(1), 1000);
    });
    stream.log();

pre(title='console output')
  :escapehtml
    > [fromCallback] <value> 1
    > [fromCallback] <end>

pre(title='events in time').
  stream:  ----1X
div



+descr-method('from-node-callback', 'fromNodeCallback', 'Kefir.fromNodeCallback(fn)').
  Similar to #[a(href='#from-callback') fromCallback],
  but the #[b callback] passed to #[b fn]
  is a Node.JS style callback — #[tt callback(error,&nbsp;result)].
  If the #[b error] argument of the #[b callback] is truthy,
  an error will be emitted from the result stream, otherwise a value is emitted.
  The stream will end after the first value or on error.

pre.javascript(title='example')
  :escapehtml
    var stream = Kefir.fromNodeCallback(callback => {
      // we use setTimeout here just to simulate some asynchronous activity
      setTimeout(() => callback(null, 1), 1000);
    });
    stream.log();

pre(title='console output')
  :escapehtml
    > [fromNodeCallback] <value> 1
    > [fromNodeCallback] <end>

pre(title='events in time').
  stream:  ----1X
div



+descr-method('from-event', 'fromEvents', 'Kefir.fromEvents(target, eventName, [transform])').
  Creates a stream from events on a DOM EventTarget or a Node.JS EventEmitter
  object, or an object that supports event listeners using #[tt on/off] methods (e.g. a jQuery object).

p.
  If a #[b transform] function is provided, it will be called on each event
  with the same arguments and context (#[tt this]) as the event listener callback.
  And the value returned by #[b transform] will be emitted from the stream.
  If no #[b transform] function is provided, the first argument of the callback is emitted by default,
  i.e. the function #[tt x&nbsp;=&gt;&nbsp;x] is used as #[b transform].

pre.javascript(title='example')
  :escapehtml
    var stream = Kefir.fromEvents(document.body, 'click');
    stream.log()

pre(title='console output')
  :escapehtml
    > [fromEvents] <value> MouseEvent {y: 474, x: 551 ...}
    > [fromEvents] <value> MouseEvent {y: 361, x: 751 ...}
    > [fromEvents] <value> MouseEvent {y: 444, x: 1120 ...}

pre(title='events in time').
  stream:  ----•-----------•----•---
      MouseEvent   MouseEvent   MouseEvent
div




a(name='from-binder')
+descr-method('stream', 'stream', 'Kefir.stream(subscribe)').
  Creates a general purpose stream. The #[b subscribe] callback is
  called on each #[a(href='#active-state') activation],
  and if a function is returned from #[b subscribe], it will be called on the following #[b deactivation].
  The #[b subscribe] function is called with #[a(href="#emitter-object") emitter] as an argument,
  which can be used to emit events from the result stream.

pre.javascript(title='example')
  :escapehtml
    var stream = Kefir.stream(emitter => {

      var count = 0;
      emitter.emit(count);

      var intervalId = setInterval(() => {
        count++;
        if (count < 4) {
          emitter.emit(count);
        } else {
          emitter.end();
        }
      }, 1000);

      return () => {
        clearInterval(intervalId);
      }

    });
    stream.log()

pre(title='console output')
  :escapehtml
    > [stream] <value:current> 0
    > [stream] <value> 1
    > [stream] <value> 2
    > [stream] <value> 3
    > [stream] <end>

pre(title='events in time').
  stream:  0----1----2----3----X
div





h2#create-property Create a property



+descr-method('constant', 'constant', 'Kefir.constant(value)').
  Creates an ended property, with the specified #[b current value].

pre.javascript(title='example').
  var property = Kefir.constant(1);
  property.log();

pre(title='console output')
  :escapehtml
    > [constant] <value:current> 1
    > [constant] <end:current>

pre(title='events in time').
  property: 1X
div



+descr-method('constant-error', 'constantError', 'Kefir.constantError(error)').
  Creates an ended property, with the specified #[b current error].

pre.javascript(title='example').
  var property = Kefir.constantError(1);
  property.log();

pre(title='console output')
  :escapehtml
    > [constantError] <error:current> 1
    > [constantError] <end:current>

pre(title='events in time').
  property: eX
div
