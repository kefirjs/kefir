h2#current-in-streams Current values/errors in streams

p.
  Normally in Kefir only Properties have current values, but depending on how we
  define "current value" we might say that Streams also may have them.

p.
  Let's see how we get current values from Properties first. There is no
  direct access to the current value of a property, we can't do something like
  #[tt prop.getCurrent()]. Instead we subscribe to the property using
  #[tt onValue(callback)] for example, and our callback gets called immediately
  with the current value.

p.
  If we define "current value" through that technical detail of getting it:
  current value is the value that we get in the callback immediately after subscribing.
  Then we can say that sometimes Streams also may have current values.

p.
  Let see some examples.

pre.javascript(title='example')
  :escapehtml
    // This is the most straightforward way for creating such a stream
    var s1 = Kefir.stream(emitter => {
      emitter.emit(1);
    });

    // But it can be created accidentally or intentionally in some other cases, such as
    var s2 = Kefir.merge([Kefir.constant(1), Kefir.never()]);
    var s3 = Kefir.combine([Kefir.constant(1), Kefir.constant(1)]);

p.
  This feature of Streams has its cons and pros.

h3 Cons

p.
  Only first subscriber gets that value. Even if it was an #[tt onEnd]
  or #[tt onError] subscriber, it'll still "consume" the "current value".
  Let's see it in an example:

pre.javascript(title='example')
  :escapehtml
    var stream = Kefir.stream(emitter => {
      emitter.emit(1);
    });
    stream.onValue(x => console.log('first', x)); // logs "first 1"
    stream.onValue(x => console.log('second', x)); // won't log


    // Even with onError it will be consumed
    var stream2 = ...
    stream.onError(fn);
    stream.onValue(x => console.log('second', x)); // won't log

p.
  This is fixed in Properties as they remember the last value, and call
  any new subscriber with it.

p.
  Another issue is that it's not very good from semantics point of view.
  The moment when an event happens in a stream depends on the moment when the stream
  gets the first subscriber. That makes subscribing not a pure operation, and whole
  system gets less declarative and functional.


h3 Pros

p.
  This feature allows you to define current value in a stream. Well it sounds
  just like the definition of the feature, but let's just look at an example,
  hopefully it'll help you understand what I mean:

pre.javascript(title='example')
  :escapehtml
    var scrollTopStream = Kefir.stream(emitter => {
      emitter.emit(window.scrollY); // here we are emitting the current value!
      window.addEventListener('scroll', () => {
        emitter.emit(window.scrollY);
      });
    });

    // Let's now convert it to a property like good citizens
    var scrollTopProperty = scrollTopStream.toProperty();

p.
  Another benefit is that it makes possible to not lose
  current values when converting properties to streams and then back to properties.
  For example, #[a(href='#combine') combine] always returns a stream
  (#[a(href='https://github.com/kefirjs/kefir/issues/44#issuecomment-72875317') why?])
  but it'll still emit the current value.
  So one can do #[tt Kefir.combine([p1, p2], fn).toProperty()],
  and get a property combined from two other properties with the correct current value.


h3 P.S.

p.
  Note that all this applies to #[a(href='#about-errors') errors] as well.

p.
  Also it's a good practice to convert all streams that might
  emit current values to properties by using the #[b toProperty] method.
  That should make your code more reliable as all subscribers will get current values.
  And it's just better semantically as current values should live in properties.
