h2#examples Examples

p.
  Let's start from a quick little example to get you a feel
  of what is it like to program with Kefir.
  First we create a stream of events
  that will produce three numbers with interval of 100 milliseconds:

pre.javascript(title='example')
  :escapehtml
    var numbers = Kefir.sequentially(100, [1, 2, 3]);

p.
  Now let's create another stream based on the first one.
  As you might guess, it will produce 2, 4, and 6.

pre.javascript(title='example')
  :escapehtml
    var numbers2 = numbers.map(x => x * 2);

p.
  Suppose we don't want number 4 to be in the sequence,
  no problem, we can filter it out:

pre.javascript(title='example')
  :escapehtml
    var numbers3 = numbers2.filter(x => x !== 4);

p.
  Ok, I think numbers3 stream is what we want,
  it's time to subscribe to it and to get the values:

pre.javascript(title='example')
  :escapehtml
    numbers3.onValue(x => {
      logger.log(x);
    });

script.
  function Logger(domNode, divider) {
    this.domNode = domNode;
    this.divider = divider || ' ';
    this.domNode.innerHTML = '';
  }

  Logger.prototype.log = function(x) {
    this.domNode.innerHTML += '' + x + this.divider;
  }

  function runExample1() {
    var logger = new Logger(document.querySelector('#example-log-1'));
    Kefir.sequentially(100, [1, 2, 3])
      .map(function(x) {
        return x * 2;
      })
      .filter(function(x) {
        return x !== 4;
      })
      .onValue(function(x) {
        logger.log(x);
      });
  }

p
  button(onClick='runExample1()') Run example

pre(title='logger output' id='example-log-1' style='min-height:18px')

hr

p.
  Nice, here is another one. Let's this time begin from a streams based on
  user actions instead of timer. First we create a stream that will contain
  button click events:

pre.javascript(title='example')
  :escapehtml
    var btnClicks = Kefir.fromEvents(document.querySelector('#ex-2-btn'), 'click');

p.
  Also let's create a stream of a text input value changes:

pre.javascript(title='example')
  :escapehtml
    var inputValue = Kefir.fromEvents(document.querySelector('#ex-2-input'), 'keyup')
      .map(event => event.target.value);

p.
  That's a good beginning, we have streams representing user actions,
  now we can transform and combine them to create our desired result stream.
  First we want to have a #[a(href='#about-observables') property]
  representing how many times user clicked the button,
  we will use #[a(href='#scan') scan] method to create it:

pre.javascript(title='example')
  :escapehtml
    var clicksCount = btnClicks.scan(sum => sum + 1, 0);

p.
  Now we have two numbers, first is clicks count, and second is text field
  content, which actually a string, but let's fix that:

pre.javascript(title='example')
  :escapehtml
    var inputNumber = inputValue.map(text => parseInt(text, 10));

p.
  Done, but now it can produce the #[tt NaN] if user type "banana" or something
  instead of a number. Let's fix this too
  using #[a(href='#about-errors') errors handling] that Kefir provides:

pre.javascript(title='example')
  :escapehtml
    var fixedInputNumber = inputNumber.flatMap(
      x => isNaN(x)
        ? Kefir.constantError('banana?')
        : Kefir.constant(x)
    );

p.
  Almost done, final step is to combine our two dynamic number values.
  Suppose we want to multiply them:

pre.javascript(title='example')
  :escapehtml
    var theResult = Kefir.combine([fixedInputNumber, clicksCount], (a, b) => a * b);

p.
  Good, let's display the result:

pre.javascript(title='example')
  :escapehtml
    var outputElement = document.querySelector('#ex-2-output');

    theResult
      .onValue(x => {
        outputElement.innerHTML = x;
      })
      .onError(error => {
        outputElement.innerHTML = '<span style="color:red">' + error + '</span>';
      });

p
  button(id='ex-2-btn') click me
  = ' '
  span(id='ex-2-count-output')
  = ' * '
  input(id='ex-2-input' placeholder='try "banana"')
  = ' =  '
  span(id='ex-2-output')

script.
  var clicksCount = Kefir
    .fromEvents(document.querySelector('#ex-2-btn'), 'click')
    .scan(function(sum, event) {
      return sum + 1;
    }, 0);

  var fixedInputNumber = Kefir
    .fromEvents(document.querySelector('#ex-2-input'), 'keyup')
    .map(function(event) {
      return event.target.value;
    })
    .map(function(text) {
      return parseInt(text, 10);
    })
    .flatMap(function(x) {
      return isNaN(x)
        ? Kefir.constantError('banana?')
        : Kefir.constant(x)
    });

  var theResult = Kefir.combine([fixedInputNumber, clicksCount], function(a, b) {
    return a * b;
  });

  var countOutputElement = document.querySelector('#ex-2-count-output');
  clicksCount.onValue(function(x) {
    countOutputElement.innerHTML = x;
  });

  var outputElement = document.querySelector('#ex-2-output');
  theResult
    .onValue(function(x) {
      outputElement.innerHTML = x;
    })
    .onError(function(error) {
      outputElement.innerHTML = '<span style="color:red">' + error + '</span>';
    });

hr

h3#more-examples More examples

ul
  li
    a(href="http://jsfiddle.net/fxv6dpo2/") Click to alert
    = " (a most basic example)"
  li
    a(href="http://jsfiddle.net/vyppkj0k/3/") Clock
    = " + "
    a(href="http://jsfiddle.net/vyppkj0k/4/") Controlled by scrolling
    = " + "
    a(href="http://jsfiddle.net/vyppkj0k/5/") Controlled by both time and scrolling
  li
    a(href="http://jsfiddle.net/tn0z97e1/") Multiple clicks
  li
    a(href="http://jsfiddle.net/cbg9rdd3/") The “Secret combination” challenge
    = " "
    | (from #[a(href="http://www.jayway.com/2014/09/16/comparing-core-async-and-rx-by-example/") here])
  li
    a(href="http://jsfiddle.net/4Lx9ktpp/") Drag a div
  li
    a(href="http://jsfiddle.net/8sd79x3L/") Tree
    = " (Bacon.js vs Kefir.js performance comparison)"
  li
    a(href="http://jsfiddle.net/v1Lesw91/") AJAX search
    = " (with errors handling and cancelation)"


p.
  #[img(data-emoji="information_desk_person")]
  Also, almost any code snippet below can be run in the browser console, on this page.
  So you can play with Kefir right now, just open up the browser console.
